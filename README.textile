h1. Monocles (formerly CouchAppSpora)

h2. This is a fork of Max Ogden's Monocles. This version users the local couchDB for authentication instead of OStatus.

h3. Local Development Setup

p. Pulled from Max Ogden's github. Create a new db in futon called chatter. I also tested out Vhosts and CouchDB, as described in "this video":http://vimeo.com/20773112

p. Add vhost name to etc/hosts.

h3. VHosts in Configuration:

@vhosts	vhostname.com:5984	/chatter/__design/monocles/__rewrite@

p. I'm using the node.js couchapp as described in "Max Ogen's tutorial":http://vimeo.com/26147136. I also created a page describing this video "here":http://vetula.blogspot.com/2011/07/sample-couchapp-project-using.html that goes into the background of creating a couchapp using node.js.

p. To push it, use couchapp push app.js http://admin:password@localhost:5984/chatter

h3. Changes to the original Monocles

* Added loginFormTemplate to monocles.html
* Added .login_setup to monocles.css
* Added input[type='password'] to input[type='text'] in monocles.css
* Added jquery.couch.js in order to use callback from $.couch.login.
* Edits to showLogin and other login-related methods, most of which were borrowed from futon. (Thanks futon!)

h3. Pushing to another server

p. Create database on iriscouch and push the app:

@mbp:monocles chrisk$ couchapp push app.js http://yourcouch.iriscouch.com/chatter@

h3. Gotcha!

p. Must switch secure_rewrite to false in Config.

h3. Viewing the app on iriscouch.com

p. App is at http://yourcouch.iriscouch.com/chatter/__design/monocles/_rewrite 

h3. Replication

p. Replicate the local data using by adding documents to the _replication database. Don't use the Futon Replication UI ( from right nav).

p. One-off replication test:

<pre><code>
curl -X POST -d '{
"target": "chatter",
"source": "http://admin:password@yourcouch.iriscouch.com/chatter"}' http://localhost:5984/_replicate
 -H "Content-type: application/json"
 </code></pre>

p. Results in an error in doc_write_failures:
<pre><code>
 { "ok": true,
 "session_id": "5310c99fcb56e2c1e22b2eb7c5abd8bf",
 "source_last_seq": 17,
 "replication_id_version": 2,
 "history":  [{ "session_id": "5310c99fcb56e2c1e22b2eb7c5abd8bf",
 "start_time": "Thu, 28 Jul 2011 15:47:22 GMT",
 "end_time": "Thu, 28 Jul 2011 15:47:25 GMT",
 "start_last_seq": 0,
 "end_last_seq": 17,
 "recorded_seq": 17,
 "missing_checked": 0,"
 missing_found": 2,
 "docs_read": 2,
 "docs_written": 0,
 "doc_write_failures": 2 }] }
 </code></pre>

p. Solution:

<pre><code>
 curl -X POST -d '{
 	"target"==:=="http://admin:password@localhost:5984/chatter",
 	"source"==:=="http://admin:password@yourcouch.iriscouch.com/chatter"}' http://localhost:5984/_replicate 
 	-H "Content-type: application/json"
</code></pre>

h4. Replication examples:

<pre>
<code>
{
   "_id": "to_iriscouch",
   "source": "http://admin:password@localhost:5984/chatter",
   "target": "http://admin:password@yourcouch.iriscouch.com/chatter",
   "continuous": true
}

{
   "_id": "from_iriscouch",
   "source": "http://admin:password@yourcouch.iriscouch.com/chatter",
   "target": "http://admin:password@localhost:5984/chatter",
   "continuous": true
}
</code>
</pre>

------------

h2. The original README.textile, continued.


h3. ..is (more or less) Diaspora implemented on CouchDB

p. The Diaspora source code was initially "released":http://www.joindiaspora.com/2010/09/15/developer-release.html on September 15th, 2010. This project is an implementation of the Diaspora protocol as a CouchApp built entirely on CouchDB.

h3. Why?

p. CouchDB is a good fit for a federated social web node due to it's robust replication, HTTP and JSON APIs. Diaspora is an attractive implementation of a federated social web application. I want to marry the front end and features of Diaspora, but build them on the flexible replication of CouchDB. The resulting application is written in pure Javascript and HTML and only requires CouchDB in order to run.

h3. Protocols

p. I am shooting for Social Web Acid Test level 0 (SWAT0) compliance by implementing the OStatus stack. Since Couch can use CommonJS, I started a project called "ostatus-js":http://github.com/maxogden/ostatus-js to write the OStatus protocols in server side javascript. To learn more about how monocles works and interoperates with other seeds, check out "this wiki page":http://github.com/maxogden/monocles/wiki/Protocols-and-examples.

p. !http://i.imgur.com/J0HPe.png!

h3. Hosting your own

p. You can run monocles anywhere that you can run CouchDB, and since it's a CouchApp, the entire application lives inside your database and can be replicated from any other monocles seed. To demonstrate the built in replication that you get with CouchDB:

* Get a CouchDB somewhere! You can get a hosted Couch from "Cloudant":http://cloudant.com or "IrisCouch":http://iriscouch.com, a downloadable Couch from "CouchBase":http://www.couchbase.com/downloads, or an Android Couch from the Android Marketplace
* Make a database and set up bidirectional continuous replication from @http://monocl.es/api@ (or any other monocles instance) to your new database. 
* Visit "http://yourcouch/yourdb/==_design/monocles/_==rewrite":http://yourcouch/yourdb/_design/monocles/_rewrite

h3. TO-DO (aka 'how to contribute')

p. Hack on the interface and make it do something cool! The bulk of the application logic is in @monocles.js@, @monocles.html@ and @monocles.css@

p. Check out the "Issues page":http://github.com/maxogden/monocles/issues

p. If you've never worked with CouchApps before, I'd highly recommend learning more about them at "couchapp.org":http://couchapp.org/

h3. License

p. TODO: I think I have to comply with Diaspora's AGPLV3 License...
